{"remainingRequest":"F:\\毕设及论文\\Food_data_analysis\\front_end\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\毕设及论文\\Food_data_analysis\\front_end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\毕设及论文\\Food_data_analysis\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\毕设及论文\\Food_data_analysis\\front_end\\src\\views\\food_contrast.vue?vue&type=template&id=15949ece&scoped=true&","dependencies":[{"path":"F:\\毕设及论文\\Food_data_analysis\\front_end\\src\\views\\food_contrast.vue","mtime":1682056103968},{"path":"F:\\毕设及论文\\Food_data_analysis\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673589664000},{"path":"F:\\毕设及论文\\Food_data_analysis\\front_end\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1673589664000},{"path":"F:\\毕设及论文\\Food_data_analysis\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673589664000},{"path":"F:\\毕设及论文\\Food_data_analysis\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":1673589664000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}